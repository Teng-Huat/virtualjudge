MailChimp: ea9d3ba5980dedb2f52868b1cc1fb7fa-us12



RUBY, Sendgrid: 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

cURL, Sendgrid: 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

#AAE2AB no-repeat center/75% url("/images/standings/check.svg")

#F67B51 no-repeat center/75% url("/images/standings/cross.svg")


# HTTP Cookie File for timus.ru by Genuinous @genuinous.
# To download cookies for this tab click here, or download all cookies.
# Usage Examples:
#   1) wget -x --load-cookies cookies.txt "http://acm.timus.ru/ce.aspx?id=7796954"
#   2) curl --cookie cookies.txt "http://acm.timus.ru/ce.aspx?id=7796954"
#   3) aria2c --load-cookies cookies.txt "http://acm.timus.ru/ce.aspx?id=7796954"
#
.timus.ru	TRUE	/	FALSE	1582990337	_ym_uid	1520782338828701925
.timus.ru	TRUE	/	FALSE	1520854338	_ym_isad	1
acm.timus.ru	FALSE	/	FALSE	0	ASP.NET_SessionId	35wvg4g5uf2huduk4lwj04tf
acm.timus.ru	FALSE	/	FALSE	1836402296	AuthorID	Y5pEPg/af2o=




www.urionlinejudge.com.br	FALSE	/judge/	TRUE	0	csrfToken	8622a1d8ed96b1c2a5b878b2c10264c843f128447c1fc75d21c1001f9d16db26cb00d6cb9658a963200952fd16d5965e92986ff40f8b95e472785ea7de753b67
www.urionlinejudge.com.br	FALSE	/judge/	TRUE	0	judge	2dmblg7jh7146hvolb5rgaktg3
www.urionlinejudge.com.br	FALSE	/judge/	FALSE	1521483047	RememberMe	Q2FrZQ%3D%3D.Nzk1NWE3ZGU0YjgxMjYyMzRmNjNhZmUyNjc1NDQxZTQyMjg3ZDQ3MzkwNTk5ZTI2MThhNTA5MGI2NDIzMjM2MgHtORCirw7Zb3oqYfzxh%2F1ZFTPDL7aEEDRDTJVojC2Ax2IiOMlcUFT6eqMGXyrPJBbF5eBnEuS1sFGymRtEdRSv4bDuXnIOYpM66ZZwS7OQ
.urionlinejudge.com.br	TRUE	/	FALSE	1583345761	_ga	GA1.3.521350226.1515942713
.urionlinejudge.com.br	TRUE	/	FALSE	1520360161	_gid	GA1.3.1081648797.1520076548

# Log in to the server.  This only needs to be done once.
wget --save-cookies cookies.txt \
     --keep-session-cookies \
     --post-data 'user=foo&password=bar' \
     --delete-after \
     http://server.com/auth.php

# Now grab the page or pages we care about.
wget --load-cookies cookies.txt \
     http://server.com/interesting/article.php

wget -qO- --keep-session-cookies --save-cookies cookies.txt --post-data 'user=MYUSER&password=MYPASS' http://www.domain.com/login.php

csrfToken=70434dc37e0fbdff09453e9fe709b79517aeb9a3526a406798444646d43cd2c1afc5833cff1edee416011e0a5909974845ff5ea9ae78d9ae5e45566b8887afa8

wget --post-data='email=sang022@e.ntu.edu.sg&password=1234567890' --save-cookies=my-cookies.txt --keep-session-cookies "https://www.urionlinejudge.com.br/judge/en/login"


<!--USER: <%= user.name %> <br />
PROBLEM: <%= problem.title %> <br />
ANSWER: <%= answer.problem.title %> <br />
PROBLEM Counter: <%= counter1 %> <br />  
ANSWER Counter: <%= counter2 %> <br />  -->



use Mix.Config

# In this file, we keep production configuration that
# you likely want to automate and keep it away from
# your version control system.

# You can generate a new secret by running:
#
#     mix phoenix.gen.secret
config :virtual_judge, VirtualJudge.Endpoint,
  secret_key_base: "RxnGxRsPrSbfgtKJ8ITUc57KllBCGe6cS33zZntkCwjNnuoZdUNIF1+O/gnitzgn"

# Configure your database
config :virtual_judge, VirtualJudge.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: "postgres",
  password: "postgres",
  database: "virtual_judge_prod",
  hostname: "localhost",
  template: "template0",
  size: 20 # The amount of database connections in the pool

config :virtual_judge, VirtualJudge.Mailer,
  adapter: Bamboo.SendgridAdapter,
  api_key: "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"


config :virtual_judge, codechef_username: "steve0hh",
codechef_password: "6RWCr+7ia^HtyN"

config :virtual_judge, codeforce_username: "steve0hh",
codeforce_password: "TiLza]R,h82Zyw"

config :virtual_judge, poj_username: "steve0hh",
poj_password: "gRIrDsT4nw3HCumX"

config :virtual_judge, timus_judge_id: "220933LG"

config :virtual_judge, zoj_username: "steve0hh",
zoj_password: "rkVowkuY2rJtLqkYGNQGxmzE"

config :virtual_judge, hust_username: "steve0hh",
hust_password: "RZ#ztCCLg9(n3Y"

config :virtual_judge, lydsy_username: "steve0hh",
lydsy_password: "J2mp#cG{c4mcGMdEHziBC"

config :virtual_judge, fzu_username: "steve0hh",
fzu_password: "qB69*kkvVqaGQUq*nEGnP"

config :virtual_judge, ACMHDU_username: "siumin",
ACMHDU_password: "1234567890"

config :virtual_judge, UVA_username: "siuminang",
UVA_password: "1234567890"

config :virtual_judge, A2OJ_username: "siumin",
A2OJ_password: "1234567890"








&& answer.inserted_at < (Enum.min(Enum.map(Enum.filter(@answers, fn(x) -> x.problem.title == problem.title && user.name == x.user.name end), fn(x) -> x.inserted_at end), fn -> 0 end)) 


siumin,B8iwvHX06PuXw4KLpmfglj2NJdlkByNN0DbhDEKWAfBGB7JEo53oHnDWKRVTvWEUHb5EFrnyQaY1BJIpyjqALlAVyEIo7yI9ju0reakWI5UHvEYJvV71w8OvjOmMAJCF







[%{name: "Ada95 (gnat 6.3)" , value: "7"},
%{name: "Any document (no testing)" , value: "59"},
%{name: "Assembler 32 (nasm 2.12.01)" , value: "13"},
%{name: "Assembler 32 (gcc 6.3 )" , value: "45"},
%{name: "Assembler 64 (nasm 2.12.01)" , value: "42"},
%{name: "AWK (mawk 1.3.3)" , value: "105"},
%{name: "AWK (gawk 4.1.3)" , value: "104"},
%{name: "Bash (bash 4.4.5)" , value: "28"},
%{name: "BC (bc 1.06.95)" , value: "110"},
%{name: "Brainf**k (bff 1.0.6))" , value: "12"},
%{name: "Whitespace (wspace 0.3)" , value: "6"},
%{name: "ADA 95 (gnat 4.3.2)", value: "7"},
%{name: "Ocaml (ocamlopt 3.10.2)" , value: "8"},
%{name: "Intercal (ick 0.28-4)" , value: "9"},
%{name: "Brainf**k (bff 1.0.3.1)" , value: "12"},
%{name: "C (clang 4.0)" , value: "81"},
%{name: "C (gcc 6.3)" , value: "11"},
%{name: "C# (gmcs 4.6.2)" , value: "27"},
%{name: "C++ (gcc 6.3)" , value: "1"},
%{name: "C++ (g++ 4.3.2)" , value: "41"},
%{name: "C++14 (clang 4.0)" , value: "82"},
%{name: "C++14 (gcc 6.3)" , value: "44"},
%{name: "C99 (gcc 6.3)" , value: "34"},
%{name: "Clips (clips 6.24)" , value: "14"},
%{name: "Clojure (clojure 1.8.0)" , value: "111"},
%{name: "Cobol (opencobol 1.1.0)" , value: "118"},
%{name: "CoffeeScript (coffee 1.12.2)" , value: "91"},
%{name: "Common Lisp (sbcl 1.3.13)" , value: "31"},
%{name: "Common Lisp (clisp 2.49)" , value: "32"},
%{name: "D (dmd 2.072.2)" , value: "102"},
%{name: "D (ldc 1.1.0)" , value: "84"},
%{name: "D (gdc 6.3)" , value: "20"},
%{name: "Dart (dart 1.21)" , value: "48"},
%{name: "Elixir (elixir 1.3.3)" , value: "96"},
%{name: "Erlang (erl 19)" , value: "36"},
%{name: "F# (mono 4.0.0)" , value: "124"},
%{name: "Fantom (fantom 1.0.69)" , value: "92"},
%{name: "Forth (gforth 0.7.3)" , value: "107"},
%{name: "Fortran (gfortran 6.3)" , value: "5"},
%{name: "Go (go 1.7.4)" , value: "114"},
%{name: "Gosu (gosu 1.14.2)" , value: "98"},
%{name: "Groovy (groovy 2.4.7)" , value: "121"},
%{name: "Haskell (ghc 8.0.1)" , value: "21"},
%{name: "Icon (iconc 9.5.1)" , value: "16"},
%{name: "Intercal (ick 0.3)" , value: "9"},
%{name: "JAR (JavaSE 6)" , value: "24"},
%{name: "Java (HotSpot 8u112)" , value: "10"},
%{name: "JavaScript (SMonkey 24.2.0)" , value: "112"},
%{name: "JavaScript (rhino 1.7.7)" , value: "35"},
%{name: "Kotlin (kotlin 1.0.6)" , value: "47"},
%{name: "Lua (luac 5.3.3)" , value: "26"},
%{name: "Nemerle (ncc 1.2.0)" , value: "30"},
%{name: "Nice (nicec 0.9.13)" , value: "25"},
%{name: "Nim (nim 0.16.0)" , value: "122"},
%{name: "Node.js (node 7.4.0)" , value: "56"},
%{name: "Objective-C (gcc 6.3)" , value: "43"},
%{name: "Objective-C (clang 4.0)" , value: "83"},
%{name: "Ocaml (ocamlopt 4.01)" , value: "8"},
%{name: "Octave (octave 4.0.3)" , value: "127"},
%{name: "Pascal (fpc 3.0.0)" , value: "22"},
%{name: "Pascal (gpc 20070904)" , value: "2"},
%{name: "PDF (ghostscript 8.62)" , value: "60"},
%{name: "Perl (perl 5.24.1)" , value: "3"},
%{name: "Perl (perl 6)" , value: "54"},
%{name: "PHP (php 7.1.0)" , value: "29"},
%{name: "Pico Lisp (pico 16.12.8)" , value: "94"},
%{name: "Pike (pike 8.0)" , value: "19"},
%{name: "PostScript (ghostscript 8.62)" , value: "61"},
%{name: "Prolog (swi 7.2.3)" , value: "15"},
%{name: "Prolog (gnu prolog 1.4.5)" , value: "108"},
%{name: "Python (cpython 2.7.13)" , value: "4"},
%{name: "Python (PyPy 2.6.0)" , value: "99"},
%{name: "Python 3 (python  3.5)" , value: "116"},
%{name: "Python 3 nbc (python 3.4)" , value: "126"},
%{name: "R (R 3.3.2)" , value: "117"},
%{name: "Racket (racket 6.7)" , value: "95"},
%{name: "Ruby (ruby 2.3.3)" , value: "17"},
%{name: "Rust (rust 1.14.0)" , value: "93"},
%{name: "Scala (scala 2.12.1)" , value: "39"},
%{name: "Scheme (guile 2.0.13)" , value: "33"},
%{name: "Scheme (stalin 0.3)" , value: "18"},
%{name: "Scheme (chicken 4.11.0)" , value: "97"},
%{name: "Sed (sed 4)" , value: "46"},
%{name: "Smalltalk (gst 3.2.5)" , value: "23"},
%{name: "SQLite (sqlite 3.16.2)" , value: "40"},
%{name: "Swift (swift 3.0.2)" , value: "85"},
%{name: "TCL (tcl 8.6)" , value: "38"},
%{name: "Text (plain text)" , value: "62"},
%{name: "Unlambda (unlambda 0.1.4.2)" , value: "115"},
%{name: "VB.net (mono 4.6.2)" , value: "50"},
%{name: "Whitespace (wspace 0.3)" , value: "6"}]











defmodule SPOJ do
  use HTTPoison.Base

  @endpoint "http://www.spoj.com"
  @user_agent "Firefox"

  def process_url(url) do
    @endpoint <> url
  end

  def process_request_headers(headers) do
    Enum.into(["User-Agent": @user_agent], headers)
  end

  def scrape_problem_listing_links() do
      __MODULE__.get!("/list.php").body
      |> Floki.find(".form_list_content div a")
      |> Floki.attribute("href")
      |> Enum.map(fn(x) -> "/" <> x end)
      |> Enum.into(["/list.php"])
  end

  def scrape_problems_listing_page(path) do
    __MODULE__.get!(path).body
    |> Floki.find("table tr td a")
    |> Floki.attribute("href")
    |> Enum.uniq()
    |> Enum.map(fn(x) -> "/" <> x end)
  end

  def scrape_problem(path) do
    resp = __MODULE__.get!(path)
    title =
      resp.body
      |> Floki.find("#problem-name")
      |> Enum.at(0)
      |> Floki.text(deep: false)
      |> String.strip()

    problem =
      resp.body
      |> Floki.find("#problem-body")
      |> Floki.raw_html()

    languages = [%{name: "Ada95 (gnat 6.3)" , value: "7"},
%{name: "Any document (no testing)" , value: "59"},
%{name: "Assembler 32 (nasm 2.12.01)" , value: "13"},
%{name: "Assembler 32 (gcc 6.3 )" , value: "45"},
%{name: "Assembler 64 (nasm 2.12.01)" , value: "42"},
%{name: "AWK (mawk 1.3.3)" , value: "105"},
%{name: "AWK (gawk 4.1.3)" , value: "104"},
%{name: "Bash (bash 4.4.5)" , value: "28"},
%{name: "BC (bc 1.06.95)" , value: "110"},
%{name: "Brainf**k (bff 1.0.6))" , value: "12"},
%{name: "Whitespace (wspace 0.3)" , value: "6"},
%{name: "ADA 95 (gnat 4.3.2)", value: "7"},
%{name: "Ocaml (ocamlopt 3.10.2)" , value: "8"},
%{name: "Intercal (ick 0.28-4)" , value: "9"},
%{name: "Brainf**k (bff 1.0.3.1)" , value: "12"},
%{name: "C (clang 4.0)" , value: "81"},
%{name: "C (gcc 6.3)" , value: "11"},
%{name: "C# (gmcs 4.6.2)" , value: "27"},
%{name: "C++ (gcc 6.3)" , value: "1"},
%{name: "C++ (g++ 4.3.2)" , value: "41"},
%{name: "C++14 (clang 4.0)" , value: "82"},
%{name: "C++14 (gcc 6.3)" , value: "44"},
%{name: "C99 (gcc 6.3)" , value: "34"},
%{name: "Clips (clips 6.24)" , value: "14"},
%{name: "Clojure (clojure 1.8.0)" , value: "111"},
%{name: "Cobol (opencobol 1.1.0)" , value: "118"},
%{name: "CoffeeScript (coffee 1.12.2)" , value: "91"},
%{name: "Common Lisp (sbcl 1.3.13)" , value: "31"},
%{name: "Common Lisp (clisp 2.49)" , value: "32"},
%{name: "D (dmd 2.072.2)" , value: "102"},
%{name: "D (ldc 1.1.0)" , value: "84"},
%{name: "D (gdc 6.3)" , value: "20"},
%{name: "Dart (dart 1.21)" , value: "48"},
%{name: "Elixir (elixir 1.3.3)" , value: "96"},
%{name: "Erlang (erl 19)" , value: "36"},
%{name: "F# (mono 4.0.0)" , value: "124"},
%{name: "Fantom (fantom 1.0.69)" , value: "92"},
%{name: "Forth (gforth 0.7.3)" , value: "107"},
%{name: "Fortran (gfortran 6.3)" , value: "5"},
%{name: "Go (go 1.7.4)" , value: "114"},
%{name: "Gosu (gosu 1.14.2)" , value: "98"},
%{name: "Groovy (groovy 2.4.7)" , value: "121"},
%{name: "Haskell (ghc 8.0.1)" , value: "21"},
%{name: "Icon (iconc 9.5.1)" , value: "16"},
%{name: "Intercal (ick 0.3)" , value: "9"},
%{name: "JAR (JavaSE 6)" , value: "24"},
%{name: "Java (HotSpot 8u112)" , value: "10"},
%{name: "JavaScript (SMonkey 24.2.0)" , value: "112"},
%{name: "JavaScript (rhino 1.7.7)" , value: "35"},
%{name: "Kotlin (kotlin 1.0.6)" , value: "47"},
%{name: "Lua (luac 5.3.3)" , value: "26"},
%{name: "Nemerle (ncc 1.2.0)" , value: "30"},
%{name: "Nice (nicec 0.9.13)" , value: "25"},
%{name: "Nim (nim 0.16.0)" , value: "122"},
%{name: "Node.js (node 7.4.0)" , value: "56"},
%{name: "Objective-C (gcc 6.3)" , value: "43"},
%{name: "Objective-C (clang 4.0)" , value: "83"},
%{name: "Ocaml (ocamlopt 4.01)" , value: "8"},
%{name: "Octave (octave 4.0.3)" , value: "127"},
%{name: "Pascal (fpc 3.0.0)" , value: "22"},
%{name: "Pascal (gpc 20070904)" , value: "2"},
%{name: "PDF (ghostscript 8.62)" , value: "60"},
%{name: "Perl (perl 5.24.1)" , value: "3"},
%{name: "Perl (perl 6)" , value: "54"},
%{name: "PHP (php 7.1.0)" , value: "29"},
%{name: "Pico Lisp (pico 16.12.8)" , value: "94"},
%{name: "Pike (pike 8.0)" , value: "19"},
%{name: "PostScript (ghostscript 8.62)" , value: "61"},
%{name: "Prolog (swi 7.2.3)" , value: "15"},
%{name: "Prolog (gnu prolog 1.4.5)" , value: "108"},
%{name: "Python (cpython 2.7.13)" , value: "4"},
%{name: "Python (PyPy 2.6.0)" , value: "99"},
%{name: "Python 3 (python  3.5)" , value: "116"},
%{name: "Python 3 nbc (python 3.4)" , value: "126"},
%{name: "R (R 3.3.2)" , value: "117"},
%{name: "Racket (racket 6.7)" , value: "95"},
%{name: "Ruby (ruby 2.3.3)" , value: "17"},
%{name: "Rust (rust 1.14.0)" , value: "93"},
%{name: "Scala (scala 2.12.1)" , value: "39"},
%{name: "Scheme (guile 2.0.13)" , value: "33"},
%{name: "Scheme (stalin 0.3)" , value: "18"},
%{name: "Scheme (chicken 4.11.0)" , value: "97"},
%{name: "Sed (sed 4)" , value: "46"},
%{name: "Smalltalk (gst 3.2.5)" , value: "23"},
%{name: "SQLite (sqlite 3.16.2)" , value: "40"},
%{name: "Swift (swift 3.0.2)" , value: "85"},
%{name: "TCL (tcl 8.6)" , value: "38"},
%{name: "Text (plain text)" , value: "62"},
%{name: "Unlambda (unlambda 0.1.4.2)" , value: "115"},
%{name: "VB.net (mono 4.6.2)" , value: "50"},
%{name: "Whitespace (wspace 0.3)" , value: "6"}]

    source = @endpoint <> path

    {title, problem, languages, source}
  end

  def login(username, password) do

    resp = __MODULE__.get!("/login")

    cookie = find_cookies_to_set(resp.headers)

    post_resp =
      __MODULE__.post!("/login",
                       {:form, [login_user: username, password: password]
                        },
                      [{"cookie", cookie}])
    cookie <> find_cookies_to_set(post_resp.headers)
IO.puts("SPOJ Cookie: " <> cookie)

#    form_data = [Username: username, Password: password, submit: "Submit", action: "signincode", url: "/"]
#    resp = __MODULE__.post!("/signin?url=%2F",
#                     {:form, form_data})
#    cookie <> find_cookies_to_set(resp.headers)


  end

  def submit_answer(source_url, answer, language_val, cookie) do

IO.puts("COOKIE: " <> cookie <> ".")

IO.puts("Language ID: " <> language_val <> ".")

 # get necessary informations
    problem_id = get_problem_id(source_url)

IO.puts("PROBLEM ID: " <> problem_id <> ".")

      # submit answer
      __MODULE__.post!("/submit/" <> problem_id,
                       {:form, [
                                       problemcode: problem_id,
                                       file: answer,
                                       lang: language_val,
                                       submit: "Submit"]
                                     }, [{"cookie", cookie}])

#      form_data = [ProblemID: problem_id, Code: answer, LanguageID: language_val, submit: "Submit"]
#      __MODULE__.post!("/submit/" <> problem_id,
#                     {:form, form_data}, [{"cookie", cookie}])


  end

  def retrieve_latest_result(username) do
    result = __MODULE__.get!("/status/" <> username).body
    |> Floki.find(".statusres")
    |> Enum.at(0)
    |> Floki.text()
    case result do
      "Waiting" <> _dots ->
        # when the results is still "Running"
        :timer.sleep(5000) # delay 5 seconds
        retrieve_latest_result(username) # recursively run
      _ -> result # all other results, return it upwards
    end
  end

  def get_problem_id("http://www.spoj.com/problems/" <> id), do: id
  def get_problem_id("/problems/" <> id), do: id

  defp find_cookies_to_set(headers) do
    headers
    |> Enum.filter(fn({key, _value}) -> key == "Set-Cookie" end)
    |> Enum.reduce("", fn({_, cookie}, acc) -> acc <> get_cookie(cookie) <> ";" end)
  end

  defp get_cookie(cookie) do
    cookie
    |> String.split(";")
    |> Enum.at(0)
  end


end






[%{name: "C (gcc  4.8.5, -O2 -lm) [+0s]" , value: "1"},
%{name: "C# (mono 5.4.0) [+2] {beta}" , value: "7"},
%{name: "C++ (g++ 4.8.5, -std=c++11 -O2 -lm) [+0s]" , value: "2"},
%{name: "C++17 (g++ 7.2.0, -std=c++17 -O2 -lm) [+0s]" , value: "16"},
%{name: "C99 (gcc  4.8.5, -std=c99 -O2 -lm) [+0s]" , value: "14"},
%{name: "Go (go 1.8.2) [+2s] {beta}" , value: "12"},
%{name: "Java 7 (OpenJDK 1.7.0) [+2s]" , value: "3"},
%{name: "Java 8 (OpenJDK 1.8.0) [+2s]" , value: "11"},
%{name: "JavaScript (nodejs 8.4.0) [+2s] {beta}" , value: "10"},
%{name: "Kotlin (1.2.0) [+2s]" , value: "15"},
%{name: "Python 2 (Python 2.7.6) [+1s]" , value: "4"},
%{name: "Python 3 (Python 3.4.3) [+1s]", value: "5"},
%{name: "Ruby (ruby 2.3.0) [+5s]" , value: "6"},
%{name: "Scala (scalac 2.11.8) [+2s] {beta}" , value: "8"}]





defmodule URI.Scraper do
  alias VirtualJudge.Problem
  alias VirtualJudge.Repo

  @doc """
  Scrapes URI `url` for the specific problem, saves it to the database
  and broadcast to the contest_channel's `topic`

  This function does not return anything
  """
  def perform(url, topic) do
    username = Application.get_env(:virtual_judge, :URI_username)
    password = Application.get_env(:virtual_judge, :URI_password)

    # remove the domain name and get the path only
    [_full_match, url_path] = Regex.run(~r/^https:\/\/.*\.com.br/judge/en(.*)/, url)

    URI.start()

    cookies = URI.login(username, password)

    {title, description, language, source} = URI.scrape_problem(url_path)

    # Create problem struct to be inserted to database
    problem = %Problem{title: title,
                       description: description,
                       programming_languages: language,
                       source: source}

    # insert into databaase
    Repo.insert(problem, on_conflict: :nothing)

    # Broadcast to contest channel
    VirtualJudge.ContestChannel.broadcast_job_done(problem, topic)
    
  end


end























defmodule URIOJ do
  use HTTPoison.Base

  @endpoint "https://www.urionlinejudge.com.br/judge/en"
  @user_agent "Firefox"

  def process_url(url) do
    @endpoint <> url
  end

  def process_request_headers(headers) do
    Enum.into(["User-Agent": @user_agent], headers)
  end

  def scrape_problem_listing_links() do
      __MODULE__.get!("/list.php").body
      |> Floki.find(".form_list_content div a")
      |> Floki.attribute("href")
      |> Enum.map(fn(x) -> "/" <> x end)
      |> Enum.into(["/list.php"])
  end

  def scrape_problems_listing_page(path) do
    __MODULE__.get!(path).body
    |> Floki.find("table tr td a")
    |> Floki.attribute("href")
    |> Enum.uniq()
    |> Enum.map(fn(x) -> "/" <> x end)
  end

  def scrape_problem(path) do
IO.puts("PATH: " <> path)

    resp1 = __MODULE__.get!(path)

    url =
      resp1.body
      |> Floki.find("iframe")
      |> Floki.attribute("src")
      |> Floki.text()

IO.puts("URL: https://www.urionlinejudge.com.br" <> url)

System.cmd("wget", ["https://www.urionlinejudge.com.br" <> url, "-O uri.html"], cd: "lib/workers")

resp2 = File.read!("/home/VMadmin/Code/virtual_judge/lib/workers/ uri.html")

    resp = __MODULE__.get!("https://www.urionlinejudge.com.br" <> url)
    title =
      resp2
      |> Floki.find("h1")
      |> Enum.at(0)
      |> Floki.text()
      |> String.strip()

    problem =
      resp2
      |> Floki.find(".problem")
      |> Floki.raw_html()

    languages = [%{name: "C (gcc  4.8.5, -O2 -lm) [+0s]" , value: "1"},
%{name: "C# (mono 5.4.0) [+2] {beta}" , value: "7"},
%{name: "C++ (g++ 4.8.5, -std=c++11 -O2 -lm) [+0s]" , value: "2"},
%{name: "C++17 (g++ 7.2.0, -std=c++17 -O2 -lm) [+0s]" , value: "16"},
%{name: "C99 (gcc  4.8.5, -std=c99 -O2 -lm) [+0s]" , value: "14"},
%{name: "Go (go 1.8.2) [+2s] {beta}" , value: "12"},
%{name: "Java 7 (OpenJDK 1.7.0) [+2s]" , value: "3"},
%{name: "Java 8 (OpenJDK 1.8.0) [+2s]" , value: "11"},
%{name: "JavaScript (nodejs 8.4.0) [+2s] {beta}" , value: "10"},
%{name: "Kotlin (1.2.0) [+2s]" , value: "15"},
%{name: "Python 2 (Python 2.7.6) [+1s]" , value: "4"},
%{name: "Python 3 (Python 3.4.3) [+1s]", value: "5"},
%{name: "Ruby (ruby 2.3.0) [+5s]" , value: "6"},
%{name: "Scala (scalac 2.11.8) [+2s] {beta}" , value: "8"}]

    source = @endpoint <> path

    {title, problem, languages, source}
  end

  def login(username, password) do

    resp = __MODULE__.get!("/login")

    csrf_token = resp.body
    |> Floki.find("input[name=_csrfToken]")
    |> Enum.at(0)
    |> Floki.attribute("value")
    |> List.to_string()

    cookie = find_cookies_to_set(resp.headers)

    post_resp =
      __MODULE__.post!("/login",
                       {:form, [_csrfToken: csrf_token, email: username, password: password, submit: "Submit"]
                        },
                      [{"cookie", cookie}])
    cookie <> find_cookies_to_set(post_resp.headers)

  end

  def submit_answer(source_url, answer, language_val, cookie) do

 # get necessary informations
    problem_id = get_problem_id(source_url)

    resp = __MODULE__.get!("/runs/add/" <> problem_id", [{"cookie", cookie}])

IO.puts("HTML SUBMIT: " <> resp.body <> ".")

     csrf_token =
      cookie
      |> String.split(";")
      |> Enum.at(1)

     csrf_token1 =
      csrf_token
      |> String.split("=")
      |> Enum.at(1)

IO.puts("CSRF TOKEN: " <> csrf_token1 <> ".")

IO.puts("COOKIE: " <> cookie <> ".")
IO.puts("PROBLEM ID: " <> problem_id <> ".")
IO.puts("Language ID: " <> language_val <> ".")

      # submit answer
      __MODULE__.post!("/runs/add/" <> problem_id,
                       {:form, [
                                       _csrfToken: csrf_token1,
                                       problem_id: problem_id,
                                       source_code: answer,
                                       language_id: language_val,
                                       submit: "Submit",
                                       action: "/judge/en/runs/add/" <> problem_id]
                                     }, [{"cookie", cookie}])

  end

  def retrieve_latest_result(username) do

IO.puts("HTML: " <> __MODULE__.get!("/runs").body)

    result = __MODULE__.get!("/runs").body
    |> Floki.find(".answer")
    |> Enum.at(0)
    |> Floki.text(deep: false)


    case result do
      "Waiting" <> _dots ->
        # when the results is still "Running"
        :timer.sleep(5000) # delay 5 seconds
        retrieve_latest_result(username) # recursively run
      _ -> result # all other results, return it upwards
    end
  end

  def get_problem_id("https://www.urionlinejudge.com.br/judge/en/problems/view/" <> id), do: id
  def get_problem_id("/problems/view/" <> id), do: id

  defp find_cookies_to_set(headers) do
    headers
    |> Enum.filter(fn({key, _value}) -> key == "Set-Cookie" end)
    |> Enum.reduce("", fn({_, cookie}, acc) -> acc <> get_cookie(cookie) <> ";" end)
  end

  defp get_cookie(cookie) do
    cookie
    |> String.split(";")
    |> Enum.at(0)
  end


end









